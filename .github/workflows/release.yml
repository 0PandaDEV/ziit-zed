name: Release

permissions:
  contents: write

on:
  pull_request:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag (e.g. v1.0.0)'
        required: true
        default: 'v1.0.0'
        type: string
      package_name:
        description: 'Package name (leave empty for workspace-wide release)'
        required: false
        default: 'ziit-ls'
        type: string
      skip_version_check:
        description: 'Skip version checking (use if tag version differs from Cargo.toml)'
        required: false
        default: true
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ github.event_name == 'push' && github.ref_name || github.event.inputs.version_tag || 'v1.0.0' }}
      package_name: ${{ github.event.inputs.package_name || 'ziit-ls' }}
      full_tag: ${{ (github.event.inputs.package_name && format('{0}-{1}', github.event.inputs.package_name, github.event.inputs.version_tag || 'v1.0.0')) || github.event.inputs.version_tag || 'v1.0.0' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up Cargo Dist
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-dist@0.28.0

      - name: Set release tag
        id: set_tag
        run: |
          VERSION_TAG="${{ github.event_name == 'push' && github.ref_name || github.event.inputs.version_tag || 'v1.0.0' }}"
          PACKAGE_NAME="${{ github.event.inputs.package_name || 'ziit-ls' }}"
          
          if [ -n "$PACKAGE_NAME" ]; then
            FULL_TAG="${PACKAGE_NAME}-${VERSION_TAG}"
            echo "Using package-specific tag: $FULL_TAG"
          else
            FULL_TAG="${VERSION_TAG}"
            echo "Using workspace-wide tag: $FULL_TAG"
          fi
          
          echo "release_tag=$FULL_TAG" >> $GITHUB_OUTPUT
          echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

      - name: Configure build
        run: |
          DIST_CMD="dist host --steps=create --tag=${{ steps.set_tag.outputs.release_tag }} --output-format=json --allow-dirty"
          echo "Running: $DIST_CMD"
          $DIST_CMD > dist-manifest.json
          echo "manifest=$(jq -c "." dist-manifest.json)" >> $GITHUB_OUTPUT
        id: config

      - name: Build artifacts
        run: |
          DIST_CMD="dist build --tag=${{ steps.set_tag.outputs.release_tag }} --print=linkage --output-format=json --allow-dirty"
          echo "Running: $DIST_CMD"
          $DIST_CMD > build-manifest.json

      - name: Upload manifests
        uses: actions/upload-artifact@v4
        with:
          name: dist-manifests
          path: |
            dist-manifest.json
            build-manifest.json

      - name: Prepare release files
        id: prepare-release
        run: |
          mkdir -p release-files
          cp -r target/release/* release-files/ || true
          echo "files_path=release-files" >> $GITHUB_OUTPUT

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ${{ steps.prepare-release.outputs.files_path }}
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: "${{ needs.build.outputs.package_name }} ${{ needs.build.outputs.version_tag }}"
          tag_name: ${{ needs.build.outputs.full_tag }}
          files: artifacts/build-artifacts/**/*
          generate_release_notes: true
          draft: false
          prerelease: false
